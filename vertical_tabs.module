<?php

/**
 * @file Main file for the vertical tabs module - provides vertical tabs on the
 * node form.
 */

/**
 * Implement hook_theme().
 */
function vertical_tabs_theme() {
  return array(
    'vertical_tabs' => array(
      'arguments' => array('form_element' => NULL),
    ),
    'vertical_tabs_js_css' => array(
      'arguments' => array('js' => NULL, 'css' => NULL, 'settings' => NULL, 'form_id' => NULL),
    ),
  );
}

/**
 * Implement hook_form_alter().
 */
function vertical_tabs_form_alter(&$form, $form_state, $form_id) {
  $config = vertical_tabs_get_config($form_id);

  // Skip programmed or excluded forms.
  if ($form['#programmed'] || $config === FALSE) {
    vertical_tabs_remove_vertical_tabs($form);
  }
  elseif ($config) {
    $form['#vertical_tabs'] = is_array($config) ? $config : array();
    $form['#pre_render'][] = 'vertical_tabs_form_pre_render';

    // Add supported core forms summary JavaScript.
    if (substr($form_id, -10) == '_node_form') {
      drupal_add_js(drupal_get_path('module', 'vertical_tabs') . '/vertical_tabs.node_form.js');
    }
    elseif ($form_id == 'node_type_form') {
      drupal_add_js(drupal_get_path('module', 'vertical_tabs') . '/vertical_tabs.node_type_form.js');
    }
  }
}

/**
 * Implement hook_form_FORM_ID_alter().
 *
 * Add our color-handling submit handler to the color settings form.
 */
function vertical_tabs_form_system_theme_settings_alter(&$form, $form_state) {
  // Add our color-handling submit handler to the color settings form.
  if (isset($form['color']) && function_exists('gd_info')) {
    $form['#submit'][] = 'vertical_tabs_system_theme_settings_submit';
  }
}

/**
 * Submit handler for the theme settings page.
 */
function vertical_tabs_system_theme_settings_submit($form, &$form_state) {
  $theme = $form_state['values']['theme'];
  $info = $form_state['values']['info'];

  // Resolve palette
  $palette = $form_state['values']['palette'];
  if ($form_state['values']['scheme'] != '') {
    $scheme = explode(',', $form_state['values']['scheme']);
    foreach ($palette as $k => $color) {
      $palette[$k] = array_shift($scheme);
    }
  }

  vertical_tabs_generate_stylesheet($theme, $info, $palette);
}

/**
 * Color module support for Garland and Vertical Tabs.
 *
 * Most of this function is direct copy/paste from color_scheme_form_submit().
 */
function vertical_tabs_generate_stylesheet($theme, $info, $palette) {
  // Current CSS files.
  $css = variable_get('color_'. $theme .'_stylesheets', array());
  $files = variable_get('color_'. $theme .'_files', array());

  // Template file.
  $file = 'vertical_tabs.garland.css';

  // Prepare target locations for generated files.
  $paths['color'] = file_directory_path() .'/color';
  $paths['source'] = drupal_get_path('module', 'vertical_tabs') .'/garland/';
  $paths['files'] = $paths['map'] = array();

  if (count($css)) {
    $paths['id'] = preg_replace('/^.*?('. $theme .'-[a-zA-Z0-9]+).*?$/', '$1', $css[0]);
    $paths['target'] = $paths['color'] .'/'. $paths['id'] .'/';

    $style = drupal_load_stylesheet($paths['source'] . $file, FALSE);

    // Rewrite stylesheet with new colors.
    $style = _color_rewrite_stylesheet($theme, $info, $paths, $palette, $style);
    $base_file = basename($file);
    $css[] = $paths['target'] . $base_file;
    $files[] = $paths['target'] . $base_file;
    _color_save_stylesheet($paths['target'] . $base_file, $style, $paths);

    // Update the list of files.
    variable_set('color_'. $theme .'_stylesheets', $css);
    variable_set('color_'. $theme .'_files', $files);
  }
}

/**
 * Implement hook_node_type().
 */
function vertical_tabs_node_type($op, $info) {
  if ($op == 'update' && !empty($info->old_type) && $info->old_type != $info->type) {
    vertical_tabs_rename_config_($info->type . '_node_form', $info->old_type . '_node_form');
  }
  elseif ($op == 'delete') {
    vertical_tabs_delete_config($info->type . '_node_form');
  }
}

function vertical_tabs_get_config($form_id = NULL) {
  $config = variable_get('vertical_tabs_forms', array());
  $config += vertical_tabs_get_default_config();
  if (isset($form_id)) {
    return isset($config[$form_id]) ? $config[$form_id] : NULL;
  }
  else {
    return $config;
  }
}

/**
 * Get the default supported forms.
 */
function vertical_tabs_get_default_config() {
  $forms = array();
  $node_types = array_keys(node_get_types('names'));
  foreach ($node_types as $node_type) {
    $forms[$node_type . '_node_form'] = TRUE;
  }
  $forms['node_type_form'] = array('identity' => 0);
  return $forms;
}

function vertical_tabs_save_config($form_id, $fieldsets) {
  $config = variable_get('vertical_tabs_form', array());
  $config[$form_id] = $fieldsets;
  variable_set('vertical_tabs_forms', $config);
}

function vertical_tabs_rename_config($old_form_id, $new_form_id) {
  $config = variable_get('vertical_tabs_forms', array());
  if (isset($config[$form_id])) {
    $config[$new_form_id] = $config[$old_form_id];
    unset($config[$old_form_id]);
    variable_set('vertical_tabs_forms', $config);
  }
}

function vertical_tabs_delete_config($form_id) {
  $config = variable_get('vertical_tabs_forms', array());
  unset($config[$form_id]);
  variable_set('vertical_tabs_forms', $config);
}

/**
 * Get all the fieldset elements from a form.
 */
function vertical_tabs_get_form_elements(&$form, $element_key = NULL) {
  $elements = array();
  foreach (element_children($form) as $key) {
    if (!isset($form[$key]['#type'])) {
      // Ignore non-type elements.
      continue;
    }
    elseif (!in_array($form[$key]['#type'], array('fieldset'))) {
      // Ignore non-fieldset elements.
      continue;
    }
    elseif (isset($form[$key]['#access']) && !$form[$key]['#access']) {
      // Ignore elements the user cannot access.
      continue;
    }

    if (isset($element_key) && isset($form[$key][$element_key])) {
      $elements[$key] = $form[$key][$element_key];
    }
    elseif (!isset($element_key)) {
      $elements[$key] = &$form[$key];
    }
  }
  return $elements;
}

/**
 * Form pre-render callback; add vertical tabs to the form.
 */
function vertical_tabs_form_pre_render($form) {
  if (!isset($form['#vertical_tabs']) || !is_array($form['#vertical_tabs'])) {
    $form['#vertical_tabs'] = array();
  }
  vertical_tabs_add_vertical_tabs($form, $form['#vertical_tabs']);
  return $form;
}

/**
 * Add a vertical tab form element to a form.
 *
 * @param $form
 *   A form array to be altered.
 * @param $fieldsets
 *   An array of fieldsets to use in the vertical tabs. If no array is provided,
 *   all the fieldsets in the $form array will be used.
 * @return
 *   TRUE if the vertical tabs were added to the form, otherwise FALSE.
 */
function vertical_tabs_add_vertical_tabs(&$form, $fieldsets = array()) {
  global $theme;

  $settings = array();
  $weight = $delta = 0;

  // Iterate through the form's fieldset elements.
  $elements = vertical_tabs_get_form_elements($form);
  foreach (array_keys($elements) as $key) {
    $element = &$elements[$key];

    if (is_array($fieldsets) && isset($fieldsets[$key]) && !$fieldsets[$key]) {
      continue;
    }

    if ($setting = vertical_tabs_process_element($element, $key)) {
      $settings[$key] = $setting;
      $settings[$key]['weight'] += 0.001 * $delta++;
    }

    // Track the maximum weight for the vertical tabs element and increment delta.
    $weight = max($weight, $settings[$key]['weight']);
  }

  // The JavaScript and CSS specific for this form.
  if (!empty($settings)) {
    $js = $css = array();

    // Add theme-specific CSS.
    if (isset($theme)) {
      $theme_stylesheets = variable_get('color_' . $theme . '_stylesheets', array());
      if (!$theme_stylesheets || !module_exists('color')) {
        // The theme-specific CSS will be only included by drupal_get_css() if
        // it exists so we do not need to check file_exists() here.
        $css[] = drupal_get_path('module', 'vertical_tabs') . '/' . $theme . '/vertical_tabs.' . $theme . '.css';
      }
      else {
        foreach ($theme_stylesheets as $path) {
          if (strpos($path, 'vertical_tabs.' . $theme . '.css') !== FALSE) {
            $css[] = $path;
          }
        }
      }
    }

    // User sort orders by the "weight" key.
    uasort($settings, '_user_sort');

    $form['vertical_tabs'] = array(
      '#vertical_tabs_settings' => $settings,
      '#vertical_tabs_js' => $js,
      '#vertical_tabs_css' => $css,
      '#form_id' => isset($form['form_id']['#value']) ? $form['form_id']['#value'] : '',
      '#type' => 'markup',
      '#value' => '',
      '#theme' => 'vertical_tabs',
      '#attributes' => array('class' => 'vertical-tabs clear-block'),
      '#weight' => $weight,
    );

    return TRUE;
  }
}

/**
 * Process an element for vertical tabs.
 */
function vertical_tabs_process_element(&$element, $key) {
  // Add a class to identify the fieldset.
  if (isset($element['#attributes']['class'])) {
    $element['#attributes']['class'] .= ' vertical-tabs-fieldset vertical-tabs-' . $key;
  }
  else {
    $element['#attributes']['class'] = 'vertical-tabs-fieldset vertical-tabs-' . $key;
  }

  // Return the JavaScript settings for this vertical tab.
  return array(
    'name' => $element['#title'],
    'weight' => isset($element['#weight']) ? $element['#weight'] : 0,
    'callback' => isset($element['#summary_callback']) ? $element['#summary_callback'] : $key,
    'args' => isset($element['#summary_arguments']) ? $element['#summary_arguments'] : array(),
  );
}

/**
 * Remove vertical tabs elements and processing from a form.
 */
function vertical_tabs_remove_vertical_tabs(&$form) {
  unset($form['#vertical_tabs']);
  if (isset($form['vertical_tabs']['#vertical_tabs_settings'])) {
    unset($form['vertical_tabs']);
  }
  if (isset($form['#pre_render'])) {
    $form['#pre_render'] = array_diff($form['#pre_render'], array('vertical_tabs_form_pre_render'));
  }
}

/**
 * After build function to add vertical tabs JS and CSS to the form.
 */
function theme_vertical_tabs($form_element) {
  // Add Vertical Tabs JS and CSS.
  theme('vertical_tabs_js_css', $form_element['#vertical_tabs_js'], $form_element['#vertical_tabs_css'], $form_element['#vertical_tabs_settings'], $form_element['#form_id']);
  return '<div class="'. $form_element['#attributes']['class'] .'">&nbsp;</div>';
}

function theme_vertical_tabs_js_css($js, $css, $settings, $form_id) {
  static $js_added = array();
  if (!isset($js_added[$form_id])) {
    drupal_add_js(array('verticalTabs' => $settings), 'setting');
    drupal_add_js(drupal_get_path('module', 'vertical_tabs') .'/vertical_tabs.js');
    drupal_add_css(drupal_get_path('module', 'vertical_tabs') .'/vertical_tabs.css');
    foreach ($js as $path) {
      drupal_add_js($path);
    }
    foreach ($css as $path) {
      drupal_add_css($path);
    }
    $js_added[$form_id] = TRUE;
  }
}

/**
 * Implement hook_form_controller_info().
 */
function vertical_tabs_form_controller_info() {
  $alterations['vertical_tabs_form'] = array(
    'title' => t('Vertical tabs'),
    'description' => t('Enables fieldsets to be collapsed into a vertical tab dispaly.'),
    'form callback' => 'vertical_tabs_form_controller_configure',
  );
  return $alterations;
}

function vertical_tabs_form_controller_configure(&$complete_form, $form_id, $context) {
  if ($elements = vertical_tabs_get_form_elements($context['form'], '#title')) {
    // Check if this form is currently vertical tabified.
    $is_form_tabified = isset($context['form']['vertical_tabs']) || (isset($context['form']['#pre_render']) && in_array('vertical_tabs_form_pre_render', $context['form']['#pre_render']));

    $config = vertical_tabs_get_config($form_id);
    if (!isset($config)) {
      $config = $is_form_tabified ? array() : FALSE;
    }

    $form['status'] = array(
      '#type' => 'checkbox',
      '#title' => t('Vertical tabify this form.'),
      '#default_value' => $config !== FALSE,
    );

    // Merge default values and correct non-key-matching values.
    if (is_array($config)) {
      foreach (array_keys($elements) as $element) {
        if (!isset($config[$element]) || $config[$element]) {
          $config[$element] = $element;
        }
      }
    }
    $form['fieldsets'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Include the following elements in the vertical tabs'),
      '#description' => t('New fieldsets will be included by default.'),
      '#options' => $elements,
      '#default_value' => $config,
    );

    if (module_exists('ctools')) {
      ctools_include('dependent');
      $form['fieldsets'] += array(
        '#process' => array('expand_checkboxes', 'ctools_dependent_process'),
        '#dependency' => array('edit-vertical-tabs-form-status' => array(TRUE)),
        '#prefix' => '<div><div id="edit-vertical-tabs-form-fieldsets-wrapper">',
        '#suffix' => '</div></div>',
      );
    }

    $complete_form['#submit'][] = 'vertical_tabs_form_controller_configure_submit';
    return $form;
  }
}

function vertical_tabs_form_controller_configure_submit($form, &$form_state) {
  $form_id = $form_state['form_controller']['form_id'];
  if ($form_state['values']['vertical_tabs_form']['status']) {
    vertical_tabs_save_config($form_id, $form_state['values']['vertical_tabs_form']['fieldsets']);
  }
  else {
    vertical_tabs_save_config($form_id, FALSE);
  }
}
